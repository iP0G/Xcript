--[[
          Lua made by L_una-chan (GTAO)
          Discord: ip0g
]]

this_load_start_time = os.clock()

if !async_http.have_access() then
    util.log("*Xcript requires internet access to run.*")
    util.toast("*Xcript requires internet access to run.*")
    util.stop_script()
end

-- Required Files

local missing_util_modules = false
xpcall(
    function()
        local Functions = require "Xcript.functions"
        local funcs = require("Xcript.funcs")
        local globals = require("Xcript.globals")
    end,
    function(err)
        missing_util_modules = true
        util.log("[Xcript | ERROR] Error loading Util Modules. Running the auto-updater to try to fix this..")
        util.toast("Error loading Util Modules. Running the auto-updater to try to fix this..")
    end
)

-- Auto Update
if !dev_vers then
    local response1 = false
    local updateError = false
    local updateDone = false
    local needsUpdate = false
    async_http.init("https://raw.githubusercontent.com", "/iP0G/Xcript/main/version", function(vers_result)
        local repository_vers = string.gsub(vers_result, '%s+', '')
        if !script_version or repository_vers != script_version or missing_util_modules then
            needsUpdate = true
            if missing_util_modules then
                util.log("[Xcript | AUTO UPDATE] Attempting to retrieve missing files for version "..repository_vers)
            else
                util.log("[Xcript | AUTO UPDATE] Found new version: "..repository_vers)
            end
            local modules = {}
            for all_modules.script_modules as module do
                modules[#modules + 1] = module.path
            end
            for all_modules.required_modules as module do
                modules[#modules + 1] = module.path
            end
            for all_modules.util_modules as module do
                modules[#modules + 1] = module.path
            end
            for modules as module do
                async_http.init("https://raw.githubusercontent.com", "/iP0G/Xcript/main/lib/"..module..".pluto", function(result)
                    if !result then
                        util.log("[Xcript | ERROR] Unknown error downloading update.")
                        updateError = true
                        return
                    end
                    local file = io.open(scriptdir.."lib/"..module..".pluto", "wb")
                    file:write(result)
                    file:close()
                end,
                function(err)
                    util.log("[Xcript | ERROR] Error getting update for module: "..module.."\nError: "..err)
                    updateError = true
                end)
                async_http.dispatch()
            end
            async_http.init("https://raw.githubusercontent.com", "/iP0G/Xcript/main/Xcript.pluto", function(result)
                if !result then
                    util.log("[Xcript | ERROR] Unknown error downloading update.")
                    updateError = true
                    return
                end
                local file = io.open(THIS_SCRIPT_FILE, "wb")
                file:write(result)
                file:close()
            end,
            function(err)
                util.log("[Xcript | ERROR] Error getting update for Xcript.pluto\nError: "..err)
                updateError = true
            end)
            async_http.dispatch()
            updateDone = true
        end
        response1 = true
    end,
    function(err)
        util.log("[Xcript | ERROR] Error checking for update: "..err)
        response1 = true
    end)
    async_http.dispatch()
    while !response1 do wait() end
    if needsUpdate then
        while !updateDone do wait() end
    else
        log(SCRIPT_NAME.." is up to date", script_version)
    end
    if needsUpdate and !updateError then
        wait(10)
        util.log("[Xcript | AUTO UPDATE] Update Success! Restarting "..SCRIPT_NAME.."...")
        util.restart_script()
    end
end

-- Natives

util.require_natives(natives_version)

-- Store Files

if !filesystem.exists(XcriptDir) then
	filesystem.mkdir(XcriptDir)
end

if !filesystem.exists(storeDir) then
	filesystem.mkdir(storeDir)
end

if !filesystem.exists(storeDir.."Players") then
	filesystem.mkdir(storeDir.."Players")
end

if !filesystem.exists(storeDir.."Persistent") then
	filesystem.mkdir(storeDir.."Persistent")
end

if !filesystem.exists(PERSISTENT_REMOVEDCOUNT_FILE) then
    local file = io.open(PERSISTENT_REMOVEDCOUNT_FILE, "w")
    if file != nil then
        file:write("0")
        file:close()
    end
end

if !filesystem.exists(PREV_EXEC_STORE) then
    CreateExecStore()
end

if !filesystem.exists(PERSISTENT_MODDER_LOGFILE) then
    local file = io.open(PERSISTENT_MODDER_LOGFILE, "w")
    if file != nil then
        file:write("0")
        file:close()
    end
end

-- Modules

for i, group in all_modules do
    for group as module do
        if !filesystem.exists(scriptdir.."lib/"..module.path..".pluto") then
            local msgt = "Missing required module "..module.name.." in group '"..i.."'. "
            local mext1 = "Functionality may be limited."
            local mext2 = "Stopping script. | Download all required files once from https://github.com/iP0G/Xcript and the auto-updater will keep the script updated."
            pluto_switch i do
                case 'dev_modules':
                    dev_vers = false
                    break
                case 'script_modules':
                    util.toast(msgt..mext1)
                    util.log("[Xcript | WARN]"..msgt..mext1)
                    break
                case 'util_modules':
                case 'required_modules':
                    util.toast(msgt..mext2)
                    util.log("[Xcript | ERROR]"..msgt..mext2)
                    wait(10)
                    util.stop_script()
                    break
                case 'private_modules':
                    private_vers = false
                    break
            end
        end
    end
end

util.execute_in_os_thread(function()
    for all_modules.private_modules as module do
        xpcall(
            function()
                local required_mod = require(module.path)
            end,
            function(err)
                private_vers = false
            end
        )
    end
    if dev_vers then
        for all_modules.dev_modules as module do
            xpcall(
                function()
                    local required_mod = require(module.path)
                end,
                function(err)
                    log("Error loading developer module: "..module.name, "ERROR")
                    notify("Error loading developer module: "..module.name)
                    dev_vers = false
                end
            )
        end
    end
    for i, group in all_modules do
        if i != 'dev_modules' and i != 'private_modules' and i != 'util_modules' then
            for group as module do
                xpcall(
                    function()
                        local required_mod = require(module.path)
                    end,
                    function(err)
                        local txt = "Error loading '"..i.."' module: "..module.name..". | Error: "..err
                        local txt1 = "Error loading '"..i.."' module: "..module.name..". Functionality may be limited. | Error: "..err
                        local txt2 = "Stopping script."
                        pluto_switch i do
                            case 'dev_modules':
                                dev_vers = false
                                break
                            case 'script_modules':
                                log(txt1, "WARN")
                                notify(txt1)
                                break
                            case 'required_modules':
                                log(txt, "ERROR")
                                notify(txt)
                                log(txt2, "STOP")
                                notify(txt2)
                                wait(10)
                                util.stop_script()
                                break
                            case 'private_modules':
                                private_vers = false
                                break
                        end
                    end
                )
            end
        end
    end
end)

-- Init

player_geo_loc_init()

if private_vers then script_version = "Private "..script_version end
if dev_vers then script_version = script_version.."-dev" end

players.dispatch_on_join()

util.keep_running()

if SCRIPT_SILENT_START then
    MISC.FORCE_LIGHTNING_FLASH()
    MISC.FORCE_LIGHTNING_FLASH()
else
    PlaySound(hitmarker_soundfile)
    draw_hitmarker()
end

if players.get_host() == players.user() then NETWORK.NETWORK_SESSION_BLOCK_JOIN_REQUESTS(false) end

GetTotalPlayersRemoved()
initModderLog()

if opt_log_total_players_removed then StartLoggingPlayersRemoved() end

local this_load_time_format = string.format("%.0f", ((os.clock() - this_load_start_time) * 1000))
log(script_version.." | Loaded in "..this_load_time_format.."ms.", "Ready")
notify(SCRIPT_NAME.." "..script_version.." | Loaded in "..this_load_time_format.."ms.")
is_starting = false

-- Shadow Start

creditslist.menu_name = "Xcript "..script_version
wait(5)
log("██╗  ██ █████╗ ██████╗ ██╗██████╗ ████████╗")
wait(5)
log("░██╳██╝██╔══██╗██╔══██╗██║██╔══██╗╚══██╔══╝")
wait(5)
log("░░███╳░██║░░╚═╝██████╔╝██║██████╔╝░░░██║░░░")
wait(5)
log("░██╳██╗██║░░██╗██╔══██╗██║██╔═══╝░░░░██║░░░")
wait(5)
log("██╗░░██╗█████╔╝██║░░██║██║██║░░░░░░░░██║░░░")
wait(5)
log("╚═╝░░╚═╝╚════╝░╚═╝░░╚═╝╚═╝╚═╝░░░░░░░░╚═╝░░░")

if ReadExecStore() then
    ExecStoreCheck()
else
    FirstScriptLoad()
end

populate_remembered_player_menu()

-- PrivateModule0
if private_vers then
    pfunc_2()
    pfunc_1()
    pfunc_0()
end

shadow_starting = false

if dev_vers then log("Finished Initialization", "-- Debug") end
